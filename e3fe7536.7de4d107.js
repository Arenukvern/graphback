(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{248:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(1),a=(n(0),n(270));const o={id:"commands",title:"CLI commands"},c={id:"version-0.12.x/commands",isDocsHomePage:!1,title:"CLI commands",description:"Commands",source:"@site/versioned_docs/version-0.12.x/commands.md",permalink:"/docs/0.12.x/commands",editUrl:"https://github.com/aerogear/graphback/edit/master/website/versioned_docs/version-0.12.x/commands.md",version:"0.12.x",sidebar:"version-0.12.x/docs",previous:{title:"Migrating from REST",permalink:"/docs/0.12.x/migrations/openapi"},next:{title:"Releases",permalink:"/docs/0.12.x/releases"},latestVersionMainDocPermalink:"/docs/introduction"},i=[{value:"Commands",id:"commands",children:[{value:"Config",id:"config",children:[]},{value:"Generate",id:"generate",children:[]},{value:"Database",id:"database",children:[]}]},{value:"OpenAPI",id:"openapi",children:[]}],s={rightToc:i};function l({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"commands"},"Commands"),Object(a.b)("p",null,"CLI offers help prompt.\nExecute ",Object(a.b)("inlineCode",{parentName:"p"},"graphback")," in your shell for more information"),Object(a.b)("h3",{id:"config"},"Config"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"graphback config\n")),Object(a.b)("p",null,"Create sample configuration in existing project to support Graphback resolver and schema generation.\nConfig will allow you to generate existing configuration that uses default Graphback plugins and one of the\ndatabases we support out of the box. Additionally data migrations configuration will be initialized that will\nhelp you to manage data migrations by specifying GraphQL queries."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note")," When creating configuration please review all paths as they might not reflect your project stucture")),Object(a.b)("h3",{id:"generate"},"Generate"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"graphback generate\n")),Object(a.b)("p",null,"  Generate command will execute generation process that will gener GraphQL server based on your data model."),Object(a.b)("h3",{id:"database"},"Database"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"graphback db\n")),Object(a.b)("p",null,"  This command creates a database or updates an existing one, based on your data model. Currently supports PostgreSQL and sqlite3."),Object(a.b)("h2",{id:"openapi"},"OpenAPI"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"graphback openapi \n")),Object(a.b)("p",null," Generate GraphQL schema and resolvers based on OpenAPI spec."))}l.isMDXComponent=!0},270:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,i({ref:t},l,{components:n})):a.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);