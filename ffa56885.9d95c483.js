(window.webpackJsonp=window.webpackJsonp||[]).push([[1023],{1079:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return p}));var a=t(2),i=t(6),r=(t(0),t(1085)),o={id:"dbmigrations",title:"Database Migrations",sidebar_label:"Migrations"},l={unversionedId:"db/dbmigrations",id:"version-0.12.x/db/dbmigrations",isDocsHomePage:!1,title:"Database Migrations",description:"Graphback uses graphql-migrations to automatically create and update tables from a GraphQL schema.",source:"@site/versioned_docs/version-0.12.x/db/migrations.md",slug:"/db/dbmigrations",permalink:"/docs/0.12.x/db/dbmigrations",editUrl:"https://github.com/aerogear/graphback/edit/master/website/versioned_docs/version-0.12.x/db/migrations.md",version:"0.12.x",sidebar_label:"Migrations",sidebar:"version-0.12.x/docs",previous:{title:"Data Sources",permalink:"/docs/0.12.x/db/datasources"},next:{title:"Migrating from REST",permalink:"/docs/0.12.x/migrations/openapi"}},b=[{value:"Compatibility",id:"compatibility",children:[]},{value:"Usage",id:"usage",children:[{value:"CLI",id:"cli",children:[]},{value:"API",id:"api",children:[]},{value:"Migration Options",id:"migration-options",children:[]}]},{value:"Defining your data model",id:"defining-your-data-model",children:[]}],c={rightToc:b};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Graphback uses ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/graphql-migrations"}),"graphql-migrations")," to automatically create and update tables from a GraphQL schema."),Object(r.b)("h2",{id:"compatibility"},"Compatibility"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"PostgreSQL (create and update database)"),Object(r.b)("li",{parentName:"ul"},"SQLite (create database only)")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h3",{id:"cli"},"CLI"),Object(r.b)("p",null,"To create or update your database from the CLI, run:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"graphback db\n")),Object(r.b)("h3",{id:"api"},"API"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"migrateDB")," method creates and updates your tables and columns to match your GraphQL schema."),Object(r.b)("p",null,"All the database operations are wrapped in a single transaction, so your database will be fully rolled back to its initial state if an error occurs."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { migrateDB } from 'graphql-migrations';\n\nconst dbConfig = {\n  // Knex.js based configuration\n};\n\nmigrateDB(dbConfig, schemaText, {\n  // Additional options\n}).then((ops) => {\n    console.log(ops);\n});\n...\n")),Object(r.b)("h3",{id:"migration-options"},"Migration Options"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"config"),": database configuration options."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"schemaText"),": GraphQL schema text."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"options"),":",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updateComments"),": overwrite comments on table and columns."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"scalarMap"),": Custom scalar mapping. Default: ",Object(r.b)("inlineCode",{parentName:"li"},"null"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"mapListToJson"),": Map scalar lists to JSON column type by default."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"debug"),": display debugging information and SQL queries."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"removeDirectivesFromSchema"),": Strips all directives from schema before processing."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"operationFilter"),": Filter out database operations that we don't want, e.g. prevent table deletion."),Object(r.b)("li",{parentName:"ul"},"All other options are not currently supported by Graphback.")))),Object(r.b)("h2",{id:"defining-your-data-model"},"Defining your data model"),Object(r.b)("h4",{id:"primary-key"},"Primary key"),Object(r.b)("p",null,"Each type must have a primary key. The primary key field must be ",Object(r.b)("inlineCode",{parentName:"p"},"id")," and the type must be ",Object(r.b)("inlineCode",{parentName:"p"},"ID"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-gql"}),"type Note {\n  id: ID!\n  title: String!\n}\n")),Object(r.b)("h4",{id:"foreign-keys"},"Foreign keys"),Object(r.b)("h5",{id:"onetoone"},"OneToOne"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Profile {\n  id: ID!\n  """\n  @oneToOne\n  """\n  user: User!\n}\n\n"""\n@model\n"""\ntype User {\n  id: ID!\n  name: String\n}\n')),Object(r.b)("p",null,"This creates a relationship via a ",Object(r.b)("inlineCode",{parentName:"p"},"userId")," column in the ",Object(r.b)("inlineCode",{parentName:"p"},"profile")," table. You can customize the key tracking the relationship with the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," annotation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Profile {\n  id: ID!\n  """\n  @oneToOne key: \'user_id\'\n  """\n  user: User!\n}\n\n"""\n@model\n"""\ntype User {\n  id: ID!\n  name: String\n}\n')),Object(r.b)("p",null,"This maps ",Object(r.b)("inlineCode",{parentName:"p"},"Profile.user")," to ",Object(r.b)("inlineCode",{parentName:"p"},"profile.user_id")," in the database."),Object(r.b)("h5",{id:"onetomany"},"OneToMany"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  title: String!\n  """\n  @oneToMany field: \'note\'\n  """\n  comments: [Comment]\n}\n')),Object(r.b)("p",null,"This creates a relationship between ",Object(r.b)("inlineCode",{parentName:"p"},"Note.comments")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Comment.note")," and maps to ",Object(r.b)("inlineCode",{parentName:"p"},"comment.noteId")," in the database. If ",Object(r.b)("inlineCode",{parentName:"p"},"Comment.note")," does not exist it will be generated for you."),Object(r.b)("p",null,"With the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," annotation you can customise the database column to map to."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'"""\n@model\n"""\ntype Note {\n  id: ID!\n  title: String!\n  """\n  @oneToMany field: \'note\', key: \'note_id\'\n  """\n  comments: [Comment]\n}\n')),Object(r.b)("p",null,"This maps to ",Object(r.b)("inlineCode",{parentName:"p"},"comment.note_id")," in the database."),Object(r.b)("h4",{id:"default-field-value"},"Default field value"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'type Note {\n  id: ID!\n  title: String!\n  """\n  @db.default: false\n  """\n  complete: Boolean\n}\n')),Object(r.b)("h4",{id:"custom-column-type"},"Custom column type"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'type Note {\n  id: ID!\n  """\n  @db.type: \'string\'\n  @db.length: 100\n  """\n  title: String!\n}\n')),Object(r.b)("h4",{id:"changing-column-names-in-graphback"},"Changing column names in Graphback"),Object(r.b)("p",null,"When working with database migration library it is possible to change individual database columns.\nUsing custom column will require manual mapping in resolver or database layer. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'type Note {\n  id: ID!\n  """\n  @db.name: \'note_title\'\n  """\n  title: String!\n}\n')),Object(r.b)("p",null,"When using custom name in database we need to map it directly inside resolver or db layer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"      // In your data provider\n      data.title = data['note_title']\n      return data;\n    }\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: database migration logic require objects to have ",Object(r.b)("inlineCode",{parentName:"p"},"id: ID!")," field defined.\nRenaming ",Object(r.b)("inlineCode",{parentName:"p"},"id")," field to anything else will break Graphback data resolution logic")))}p.isMDXComponent=!0},1085:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),p=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),s=p(t),m=a,u=s["".concat(o,".").concat(m)]||s[m]||d[m]||r;return t?i.a.createElement(u,l(l({ref:n},c),{},{components:t})):i.a.createElement(u,l({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);