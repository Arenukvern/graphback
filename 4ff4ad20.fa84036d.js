(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{151:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(1),a=r(6),o=(r(0),r(270)),l={id:"crud-resolvers",title:"CRUD Resolvers Plugin",sidebar_label:"CRUD Resolvers"},i={id:"version-0.12.x/plugins/crud-resolvers",isDocsHomePage:!1,title:"CRUD Resolvers Plugin",description:"The Graphback CRUD Resolvers plugin gives developers an opinionated way to generate a set of Node.js server compatible GraphQL resolvers",source:"@site/versioned_docs/version-0.12.x/plugins/graphback-resolvers.md",permalink:"/docs/0.12.x/plugins/crud-resolvers",editUrl:"https://github.com/aerogear/graphback/edit/master/website/versioned_docs/version-0.12.x/plugins/graphback-resolvers.md",version:"0.12.x",sidebar_label:"CRUD Resolvers",sidebar:"version-0.12.x/docs",previous:{title:"Graphback CRUD Schema Plugin",permalink:"/docs/0.12.x/plugins/crud-schema"},next:{title:"Graphback CRUD Client Queries Plugin",permalink:"/docs/0.12.x/plugins/crud-client"},latestVersionMainDocPermalink:"/docs/introduction"},c=[{value:"Installation",id:"installation",children:[]},{value:"Using",id:"using",children:[]},{value:"Configuration",id:"configuration",children:[{value:"File extension",id:"file-extension",children:[]},{value:"Output path",id:"output-path",children:[]},{value:"File name",id:"file-name",children:[]},{value:"Layout",id:"layout",children:[]}]}],s={rightToc:c};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The Graphback CRUD Resolvers plugin gives developers an opinionated way to generate a set of Node.js server compatible GraphQL resolvers\nthat will work with the schema and client side queries generated by Graphback."),Object(o.b)("p",null,"The generated CRUD resolvers use our ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../crud/crudruntime"}),"Runtime Abstraction")," that gives you the ability to dynamically connect to a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../db/datasources"}),"variety of data sources"),"."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Add the plugin to your application with npm:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"npm install @graphback/codegen-resolvers\n")),Object(o.b)("h2",{id:"using"},"Using"),Object(o.b)("p",null,"Add ",Object(o.b)("inlineCode",{parentName:"p"},"graphback-resolvers")," to your ",Object(o.b)("inlineCode",{parentName:"p"},".graphqlrc.yml")," config file under the ",Object(o.b)("inlineCode",{parentName:"p"},"graphback")," extension:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins:\n  graphback-resolvers:\n    outputPath: ./server/src/resolvers\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"graphback-resolvers")," configuration must come ",Object(o.b)("strong",{parentName:"em"},"after")," ",Object(o.b)("inlineCode",{parentName:"em"},"graphback-schema")," as it depends on the generated schema"),".")),Object(o.b)("p",null,"Run ",Object(o.b)("inlineCode",{parentName:"p"},"graphback generate")," to generate your CRUD resolvers. This will generate a single resolvers file in your ",Object(o.b)("inlineCode",{parentName:"p"},"outputPath"),"."),Object(o.b)("p",null,"Example generated resolver function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"findAllNotes: (parent, args, context) => {\n  return context.Note.findAll(args)\n},\n")),Object(o.b)("p",null,"For a full example, see our ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/aerogear/graphback/blob/master/templates/ts-apollo-fullstack/server/src/resolvers/resolvers.ts"}),"TypeScript Apollo Template"),"."),Object(o.b)("p",null,"You can then import the resolvers into your application:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import resolvers from './resolvers/resolvers';\n\nconst apolloServer = new ApolloServer({\n  ...\n  resolvers\n})\n")),Object(o.b)("p",null,"The generated resolvers use our ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../crud/crudruntime"}),"Runtime Abstraction")," and depend on the CRUD services to be passed to the resolver function as part of the context. To add these services to your application see ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"../db/datasources"}),"Data Sources"),"."),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("p",null,"You can customise how your resolvers are generated by editing ",Object(o.b)("inlineCode",{parentName:"p"},"extensions.graphback.graphback-resolvers")," in your ",Object(o.b)("inlineCode",{parentName:"p"},".graphqlrc.yml")," file."),Object(o.b)("h3",{id:"file-extension"},"File extension"),Object(o.b)("p",null,"To specify the file extension of the generated resolvers file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"format: 'ts'\n")),Object(o.b)("p",null,"If not specified this defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"'ts'"),"."),Object(o.b)("p",null,"Supported options: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ts")," - TypeScript extension."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"js")," - JavaScript extension.")),Object(o.b)("h3",{id:"output-path"},"Output path"),Object(o.b)("p",null,"To specify the relative path for the generated resolvers file to be located:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"outputPath: './src/resolvers'\n")),Object(o.b)("h3",{id:"file-name"},"File name"),Object(o.b)("p",null,"The generated resolvers file by default will be called ",Object(o.b)("inlineCode",{parentName:"p"},"resolvers.(ts|js)"),". You can override this by adding ",Object(o.b)("inlineCode",{parentName:"p"},"resolversFileName")," to your config:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"resolversFileName: 'generatedResolvers'\n")),Object(o.b)("p",null,"If not specified this defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"resolvers"),"."),Object(o.b)("h3",{id:"layout"},"Layout"),Object(o.b)("p",null,"To customise the layout of the resolvers object:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"layout: 'graphql'\n")),Object(o.b)("p",null,"If not specified this defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"'apollo'"),"."),Object(o.b)("p",null,"Supported options:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"apollo")," - Apollo GraphQL resolvers layout."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"graphql")," - GraphQL.js resolvers layout.")))}p.isMDXComponent=!0},270:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i({},t,{},e)),r},b=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(r),d=n,m=b["".concat(l,".").concat(d)]||b[d]||u[d]||o;return r?a.a.createElement(m,i({ref:t},s,{components:r})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);